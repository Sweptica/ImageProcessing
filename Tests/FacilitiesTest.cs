using Framework.Core;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Drawing;

namespace Tests
{


    /// <summary>
    ///This is a test class for FacilitiesTest and is intended
    ///to contain all FacilitiesTest Unit Tests
    ///</summary>
    [TestClass()]
    public class FacilitiesTest
    {
        private Image[] images = null;

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes

        //You can use the following additional attributes as you write your tests:        
        //Use ClassInitialize to run code beforeLoad running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}        
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}

        /// <summary>
        /// Use TestInitialize to run code beforeLoad running each test
        /// </summary>
        [TestInitialize()]
        public void MyTestInitialize()
        {
            images = Functions.OpenAllImages();
        }

        /// <summary>
        /// Use TestCleanup to run code after each test has run
        /// </summary>
        [TestCleanup()]
        public void MyTestCleanup()
        {
            images = null;
        }

        #endregion

        [TestMethod()]
        public void ConversionOfImageToBitmap()
        {
            foreach (Image i in images)
            {
                Assert.AreNotEqual(null, i, "One is null!");

                Bitmap b = Facilities.ToBitmap(i);

                Assert.AreNotEqual(null, b, "Generated bitmap is null!");

                Assert.AreEqual(b.Width, i.Width, "Widths of generated bitmap and original image are not equal!");
                Assert.AreEqual(b.Height, i.Height, "Heights of generated bitmap and original image are not equal!");

                Image i2 = Facilities.ToImage(b);

                Assert.AreNotEqual(null, i2, "Restored image is null!");

                Assert.AreEqual(i2.Width, i.Width, "Widths of restored image and original image are not equal!");
                Assert.AreEqual(i2.Height, i.Height, "Heights of restored image and original image are not equal!");

            }
        }

        [TestMethod()]
        public void ConversionOfImageToColors()
        {
            foreach (Image i in images)
            {
                Assert.AreNotEqual(null, i, "One is null!");

                Color[,] colors = Facilities.ToColor(i);

                Assert.AreNotEqual(null, colors, "Generated colors is null!");

                Image i2 = Facilities.ToBitmap(colors) as Image;

                Assert.AreNotEqual(null, i2, "Restored image is null!");

                Assert.AreEqual(i2.Width, i.Width, "Widths of restored image and original image are not equal!");
                Assert.AreEqual(i2.Height, i.Height, "Heights of restored image and original image are not equal!");

            }
        }
        
        [TestMethod()]
        public void ConversionOfImageToGrayRGBToBytes()
        {
            foreach (Image i in images)
            {
                Assert.AreNotEqual(null, i, "One is null!");

                Color[,] g_RGB = Facilities.ToRGBGreyScale(i as Bitmap);

                Assert.AreNotEqual(null, g_RGB, "Generated gray scale is null!");

                Byte[,] g_b = Facilities.To8bppGreyScale(i as Bitmap);

                Assert.AreNotEqual(null, g_b, "Generated bytes is null!");
                
                Image i2 = Facilities.ToBitmap(g_RGB) as Image;

                Assert.AreNotEqual(null, i2, "Restored image (from grayscale) is null!");
                
                Image i3 = Facilities.ToBitmap(Facilities.ToRGBGreyScale(g_b)) as Image;
                
                Assert.AreNotEqual(null, i3, "Restored image (from bytes) is null!");

                Assert.AreEqual(i2.Width, i.Width, "Widths of restored image (from grayscale) and original image are not equal!");
                Assert.AreEqual(i2.Height, i.Height, "Heights of restored image (from grayscale) and original image are not equal!");

                Assert.AreEqual(i3.Width, i.Width, "Widths of restored image (from bytes) and original image are not equal!");
                Assert.AreEqual(i3.Height, i.Height, "Heights of restored image (from bytes) and original image are not equal!");

            }
        }

    }
}
